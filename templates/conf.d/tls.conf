# Turn off old and possibly unsafe SSL protocols. TLSv1 is still necessary
# for some older devices but I do not care.
ssl_protocols TLSv1.2 TLSv1.3;

# Enable session resumption to improve https performance
# http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
ssl_session_cache shared:SSL:50m;
ssl_session_timeout 5m;

# Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
ssl_dhparam /etc/nginx/ssl/dhparam.pem;

# Enables server-side protection from BEAST attacks
# http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
ssl_prefer_server_ciphers on;

# Ciphers chosen for forward secrecy and compatibility
# http://blog.ivanristic.com/2013/08/configuring-apache-nginx-and-openssl-for-forward-secrecy.html
ssl_ciphers HIGH:!aNULL:!MD5:!3DES;

# Enable ocsp stapling (mechanism by which a site can convey certificate
# revocation information to visitors in a privacy-preserving, scalable
# manner)
# http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
#resolver 8.8.8.8;
#ssl_stapling on;
#ssl_trusted_certificate /etc/nginx/ssl/star_forgott_com.crt;

# Config to enable HSTS (HTTP Strict Transport Security) [1] to avoid ssl
# stripping [2].
# [1] https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
# [2] https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

# Config to not allow the browser to render the page inside an frame or
# iframe and avoid clickjacking [1].    If you need to allow [i]frames, you
# can use SAMEORIGIN or even set an uri with ALLOW-FROM uri [2].
# [1] http://en.wikipedia.org/wiki/Clickjacking
# [2] https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
# add_header X-Frame-Options SAMEORIGIN;

# When serving user-supplied content, include a X-Content-Type-Options:
# nosniff header along with the Content-Type: header, to disable
# content-type sniffing on some browsers.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
add_header X-Content-Type-Options nosniff;

# This header enables the cross-site scripting (XSS) filter built into most
# recent web browsers.    It's usually enabled by default anyway, so the role
# of this header is to re-enable the filter for this particular website if
# it was disabled by the user.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
add_header X-XSS-Protection "1; mode=block";

# With Content Security Policy (CSP) enabled and a browser that supports it
# [1] you can tell the browser that it can only download content from the
# domains you explicitly allow [2, 3]
# [1] http://caniuse.com/#feat=contentsecuritypolicy
# [2] http://www.html5rocks.com/en/tutorials/security/content-security-policy/
# [3] https://www.owasp.org/index.php/Content_Security_Policy
add_header Content-Security-Policy "default-src 'none'; connect-src 'self'; font-src 'self' data:; img-src 'self' data: https:; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; frame-ancestors 'none';";

# Only send the shortened referrer to a foreign origin, full referrer
# to a local host
# https://infosec.mozilla.org/guidelines/web_security#referrer-policy
add_header Referrer-Policy strict-origin-when-cross-origin;
